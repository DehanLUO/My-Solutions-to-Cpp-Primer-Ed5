/*
 * Exercise 13.6: What is a copy-assignment operator? When is this operator
 * used? What does the synthesized copy-assignment operator do? When is it
 * synthesized?
 */

/*
 * What is a copy-assignment operator?
 * A special member function with signature: T& operator=(const T&). Responsible
 * for assigning the values of one object to another existing object.
 *
 * When is it used?
 * - When one object is assigned to another using `=`
 * - During container oparations that modify elements
 * - In function return value optimization
 *
 * Synthesized copy-assignment operator:
 * - Generated by compiler if no user-defined version exists
 * - Performs memberwise assignment of all non-static members
 * - For pointer members: copies the pointer value (shallow copy)
 *
 * When is it synthesized?
 * - Always synthesized if not declared by the user
 * - Not synthesized if the class has:
 *   - Reference members
 *   - const members
 *   - Members that do not have copy-assignment operators
 *   - Base classes without copy-assignment operators
 */

#include <iostream>
#include <string>

class Book {
 public:
  friend void ProcessBook(Book b);
  friend Book CreateBook();

 public:
  // Default constructor
  Book(const std::string& t = "", int p = 0) : title_(t), pages_(p) {
    std::cout << "CONSTRUCT default: " << title_ << ", " << pages_ << '\n';
  }

  // Copy constructor
  Book(const Book& other) : title_(other.title_), pages_(other.pages_) {
    std::cout << "CONSTRUCT copy: " << title_ << ", " << pages_ << '\n';
  }

  /**
   * @brief Copy-assignment operator
   * @param other The Book to copy from
   * @return Reference to this object
   *
   * Key characteristics:
   * 1. Returns *this to allow chaining (a = b = c)
   * 2. Takes const reference parameter
   * 3. Must handle self-assignment safely
   * 4. Should free old resources before acquiring new ones
   */
  Book& operator=(const Book& other) {
    std::cout << "OPERATOR assign\n"
              << "  lhs: " << title_ << ", " << pages_ << '\n'
              << "  rhs: " << other.title_ << ", " << other.pages_ << '\n';
    // 1. Check for self-assignment
    if (this != &other) {
      // 2. Copy all members
      title_ = other.title_;
      pages_ = other.pages_;
    }
    // 3. Return reference to this object
    return *this;
  }

 private:
  std::string title_;
  int pages_;
};

// Example function showing copy constructor usage
void ProcessBook(Book b) {  // Copy constructor invoked here
  std::cout << "Processing: " << b.title_ << "\n";
}

Book CreateBook() {
  Book temp("Temporary", 100);
  return temp;  // May invoke copy constructor (subject to copy elision)
}

int main() {
  Book book1("C++ Primer", 500);
  Book book2("Effective C++", 300);

  Book book3;
  book3 = book2 = book1;  // operator= called twice

  return 0;
}

/*
 * $ g++ -o main chapter-13/exercise-06.cc && ./main
 * CONSTRUCT default: C++ Primer, 500
 * CONSTRUCT default: Effective C++, 300
 * CONSTRUCT default: , 0
 * OPERATOR assign
 *   lhs: Effective C++, 300
 *   rhs: C++ Primer, 500
 * OPERATOR assign
 *   lhs: , 0
 *   rhs: C++ Primer, 500
 */
