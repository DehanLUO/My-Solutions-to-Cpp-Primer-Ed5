/*
 * Exercise 13.9: What is a destructor? What does the synthesized destructor do?
 * When is a destructor synthesized?
 */

/*
 * What is a destructor?
 * - A special member function that cleans up object resources
 * - Signature: ~T()
 * - Automatically invoked when:
 *   - Object goes out of scope
 *   - `delete` is called on a dynamically allocated object
 *   - Stack unwinding during exception handling
 *
 * Synthesized destructor behaviour:
 * - Generated by compiler if no user-defined destructor exists
 * - Performs member-wise destruction:
 *   - Calls destructors for class-type members
 *   - Does nothing for built-in types (pointers, ints, etc.)
 * - For `Simple` class below, it would essentially do:
 *   `~Simple() = defatul;` Calls name.~string()
 *
 * When is a destructor synthesized?
 * - Always synthesized if not declared by user
 * - Not synthesized if:
 *   - Any member has deleted destructor
 *   - Base class has deleted/inaccessible destructor
 * - Default is "inline public" (same as other synthesized operations)
 *
 * When to declare my own destructor:
 * - When class manages resources (memrory, files, sockets)
 * - When I need to log object destruction
 * - When implementing RAII patterns
 * - When virtual polymorphism is needed (base classes)
 */

#include <iostream>  // std::cout
#include <string>    // std::string

class ResourceHolder {
 public:
  /**
   * @brief Constructor allocates resources
   * @param size Number of resources to allocate
   */
  ResourceHolder(size_t size) : data(new int[size]), size(size) {
    std::cout << "Allocated " << size << " resources\n";
  }

  /**
   * @brief Destructor - releases allocated resources
   *
   * Key characteristics:
   * 1. Named ~ClassName()
   * 2. No parameters or return type
   * 3. Called automatically when object goes out of scope
   * 4. Should release all owned resources
   */
  ~ResourceHolder() {
    delete[] data;
    std::cout << "Freed " << size << " resources\n";
  }

 private:
  int* data;
  size_t size;
};

class Simple {
  // No explicit destructor
  std::string name;
};

int main() {
  // Example 1: Explicit destructor
  {
    ResourceHolder rh(10);  // Constructor called
  }  // Destructor called automatically when leaving scope

  // Example 2: Synthesized destructor
  {
    Simple s;  // Default constructor called
  }  // Synthesized destructor called

  return 0;
}

/*
 * $ g++ -o main chapter-13/exercise-09.cc && ./main
 * Allocated 10 resources
 * Freed 10 resources
 */
