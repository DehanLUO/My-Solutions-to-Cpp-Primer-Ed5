/*
 * Exercise 2.31: Given the declarations in the previous exercise determine
 * whether the following assignments are legal. Explain how the top-level or
 * low-level const applies in each case.
 *     r1 = v2;
 *     p1 = p2;        p2 = p1;
 *     p1 = p3;        p2 = p3;
 */

/*
 * r1 = v2;
 * Legal. `ri` is a reference to int. `v2` is non-const int. It is ok to bind a
 * non-const int lvalue to a reference to int.
 *
 * p1 = p2;
 * Illegal. `p1` is a non-const pointer to non-const int. `p2` is a non-const
 * pointer to const int. Assigning a pointer-to-const to a pointer-to-non-const
 * would allow modifying const data through `p1`, violating const correctness.
 *
 * p2 = p1;
 * Legal. `p2` is a non-const pointer to const int. `p1` is a non-const pointer
 * to non-const int. It is ok to assign a pointer-to-non-const to a
 * pointer-to-const.
 *
 * p1 = p3;
 * Illegal. `p1` is a non-const pointer to non-const int. `p3` is a const
 * pointer to const int. Same issue as p1 = p2;
 *
 * p2 = p3;
 * Legal. `p2` is a non-const pointer to const int. `p3` is a const pointer to
 * const int. It is ok to assign a const pointer-to-const to a non-const
 * pointer-to-const.
 *
 */